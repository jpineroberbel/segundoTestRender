#!/usr/bin/env node
const { Server } = require('socket.io');
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('proyectonode:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//const io = new Server(server);
 const io = new Server
({
  cors: {
    origin: "http://localhost:4000"
  }
});

io.listen(4000);

let usuariosConectados = 0;
io.on('connection', (socket) => {
  usuariosConectados++;
  console.log('Hay conectados un total de '+usuariosConectados + ' usuarios');
  io.emit('entradaUsuario', "Numero de usuario "+usuariosConectados);
  socket.on('disconnect', () => {
    usuariosConectados--; 
  });
  socket.on('mensaje', (msg) => {
    datosAEnviar = {
      nick: socket.nick,
      mensaje: msg
    }
    socket.broadcast.emit('mensaje',datosAEnviar)
  });

  socket.on('nick', (msg) => {
    socket.nick = msg;
    socket.broadcast.emit('entrada',msg +"ha entrado al chat")
  });

  socket.on("entrarSala", (chat)=>{
    socket.join(chat);
    io.to(chat).emit('connectToRoom', "Bienvenido a la sala");  
  });

  socket.on('mensajeEnSala',  (datos)=>{
    datos = {
        sala: "nombreSala",
        nick: "miNick",
        msg: "mensaje"
    }
    socket.to(datos.sala).emit("mensajeEnSala", datos)
  })

});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
